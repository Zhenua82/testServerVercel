// const http = require('http');

// const allowedOrigins = [
//   'https://ce03510-wordpress-og5g7.tw1.ru',
//   'http://127.0.0.1:5500',
//   'https://testserver-eight-olive.vercel.app'
// ];

// const server = http.createServer((req, res) => {
//   const origin = req.headers.origin;

//   // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ Origin —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º
//   if (allowedOrigins.includes(origin)) {
//     res.writeHead(200, {
//       'Access-Control-Allow-Origin': origin,
//       'Content-Type': 'text/html',
//     });
//   } else {
//     res.writeHead(403, {
//       'Content-Type': 'text/html',
//     });
//     res.end('<h1>403 Forbidden: Access is denied</h1>');
//     return;
//   }

//   console.log('+++OK');
//   res.end('<h1>Answer from server on port 5000!!!!!!!!!!!!</h1> <a href="#">Link</a>');
// });

// server.listen(5000, () => {
//   console.log('–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5000');
// });


// server.js

// const express = require('express');
// const mysql = require('mysql2');
// const cors = require('cors');
// require('dotenv').config();

// const app = express();
// app.use(express.json());

// // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
// const allowedOrigins = [
//   'https://ce03510-wordpress-og5g7.tw1.ru',
//   'http://127.0.0.1:5500',
//   'https://testserver-eight-olive.vercel.app'
// ];

// app.use(cors({
//   origin: function(origin, callback) {
//     // –†–∞–∑—Ä–µ—à–∞–µ–º, –µ—Å–ª–∏ origin –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –∏–ª–∏ –µ—Å–ª–∏ origin –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö)
//     if (!origin || allowedOrigins.indexOf(origin) !== -1) {
//       callback(null, true);
//     } else {
//       callback(new Error('Not allowed by CORS'));
//     }
//   }
// }));

// const DATA = {
//   host: process.env.DB_HOST,
//   port: process.env.DB_PORT,
//   user: process.env.DB_USER,
//   password: process.env.DB_PASSWORD,
//   database: process.env.DB_DATABASE
// };

// app.post('/bd', (req, res) => {
//   const connection = mysql.createConnection(DATA);
//   connection.connect();

//   // const query = 'ALTER TABLE homework_human CHANGE COLUMN age telephone VARCHAR(81)';
//   // let query = 'SELECT Name, photo, telephone FROM homework_human WHERE is_published = true';
//   // let query = 'SELECT Name, photo, telephone, profession_id, portfolio FROM homework_human WHERE is_published = true';

//   let query = `
//     SELECT 
//       hh.Name, 
//       hh.photo, 
//       hh.telephone, 
//       hp.title AS profession_title,
//       hh.portfolio
//     FROM homework_human AS hh
//     JOIN homework_profession AS hp ON hh.profession_id = hp.id
//     WHERE hh.is_published = true;
//     `;
  
//   connection.query(query, (error, result) => {
//     if (error) {
//       res.status(500).json({ error: error.message });
//     } else {
//       res.json({ message: '–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–¥ —Å–æ—Å—Ç–æ—è–ª–æ—Å—å', result });
//     }
//     connection.end();
//   });
// });
// app.get('/', (req, res) => {
//   res.end('<h1>Answer from server on port 5000!!!!!!!!!!!!</h1> <a href="#">Link</a>')
// })
// // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ ‚Äî –≤—ã–≤–æ–¥ 404
// app.use((req, res) => {
//   res.status(404).send('<h1>404!!!</h1>');
// });

// app.listen(5000, () => console.log('Server running on port 5000'));


const express = require('express');
const mysql = require('mysql2');
const cors = require('cors');
const multer = require('multer');
const axios = require('axios');
const FormData = require('form-data');
require('dotenv').config();

const app = express();
app.use(express.json());

// CORS
const allowedOrigins = [
  'https://ce03510-wordpress-og5g7.tw1.ru',
  'http://127.0.0.1:5500',
  'https://testserver-eight-olive.vercel.app'
];

app.use(cors({
  origin: function (origin, callback) {
    if (!origin || allowedOrigins.includes(origin)) {
      callback(null, true);
    } else {
      callback(new Error('Not allowed by CORS'));
    }
  }
}));

// MySQL config
const DATA = {
  host: process.env.DB_HOST,
  port: process.env.DB_PORT,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_DATABASE
};

// ==============================
// üìå POST /bd ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫
// ==============================
app.post('/bd', (req, res) => {
  const connection = mysql.createConnection(DATA);
  connection.connect();

  const query = `
    SELECT 
      hh.Name, 
      hh.photo, 
      hh.telephone, 
      hp.title AS profession_title,
      hh.portfolio
    FROM homework_human AS hh
    JOIN homework_profession AS hp ON hh.profession_id = hp.id
    WHERE hh.is_published = true;
  `;

  connection.query(query, (error, result) => {
    connection.end();
    if (error) {
      res.status(500).json({ error: error.message });
    } else {
      res.json({ message: '–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–¥ —Å–æ—Å—Ç–æ—è–ª–æ—Å—å', result });
    }
  });
});

// ==============================
// üìå POST /bdPost ‚Äî –ø—Ä–∏—ë–º —Ñ–æ—Ä–º—ã
// ==============================

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.memoryStorage();
const upload = multer({ storage: storage });

// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π upload, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏ –æ–¥–∏–Ω–æ—á–Ω–æ–µ, –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
const uploadFields = upload.fields([
  { name: 'photo', maxCount: 1 },
  { name: 'portfolio', maxCount: 10 }
]);

app.post('/bdPost', uploadFields, async (req, res) => {
  const photoFile = req.files['photo']?.[0];       // –í–∏–∑–∏—Ç–∫–∞
  const portfolioFiles = req.files['portfolio'] || []; // –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ

  if (!photoFile) {
    return res.status(400).json({ error: '–ü–æ–ª–µ photo –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
  }

  try {
    // üîª –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–∑–∏—Ç–∫—É
    const photoForm = new FormData();
    photoForm.append('file', photoFile.buffer, photoFile.originalname);

    const photoUploadResponse = await axios.post(
      'https://ce03510-wordpress-og5g7.tw1.ru/api/upload.php',
      photoForm,
      { headers: photoForm.getHeaders() }
    );

    const photoUrl = photoUploadResponse.data?.fileUrl;
    if (!photoUrl) {
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–∑–∏—Ç–∫–∏ (photo)' });
    }

    // üîª –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
    const uploadedPortfolioUrls = [];

    for (const file of portfolioFiles) {
      const form = new FormData();
      form.append('file', file.buffer, file.originalname);

      const response = await axios.post(
        'https://ce03510-wordpress-og5g7.tw1.ru/api/upload.php',
        form,
        { headers: form.getHeaders() }
      );

      if (response.data && response.data.fileUrl) {
        uploadedPortfolioUrls.push(response.data.fileUrl);
      } else {
        return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ' });
      }
    }

    // üîª –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const connection = mysql.createConnection(DATA);
    connection.connect();

    const portfolioString = uploadedPortfolioUrls.join(',');

    const name = req.body.name || '–ë–µ–∑ –∏–º–µ–Ω–∏';
    const telephone = req.body.telephone || '';
    const professionId = req.body.profession_id || 1;

    const insertQuery = `
      INSERT INTO homework_human (Name, photo, telephone, profession_id, portfolio, is_published)
      VALUES (?, ?, ?, ?, ?, true)
    `;

    connection.query(insertQuery, [name, photoUrl, telephone, professionId, portfolioString], (error, result) => {
      connection.end();
      if (error) {
        return res.status(500).json({ error: error.message });
      } else {
        return res.json({
          success: true,
          insertedId: result.insertId,
          photo: photoUrl,
          portfolio: uploadedPortfolioUrls
        });
      }
    });

  } catch (err) {
    console.error('–û—à–∏–±–∫–∞:', err);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–ª–∏ –∑–∞–ø–∏—Å–∏ –≤ –ë–î' });
  }
});

// app.post('/bdPost', upload.array('portfolio'), async (req, res) => {
//   const files = req.files;

//   if (!files || files.length === 0) {
//     return res.status(400).json({ error: '–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤' });
//   }

//   try {
//     const uploadedUrls = [];

//     for (const file of files) {
//       const form = new FormData();
//       form.append('file', file.buffer, file.originalname);

//       const response = await axios.post(
//         'https://ce03510-wordpress-og5g7.tw1.ru/api/upload.php',
//         form,
//         { headers: form.getHeaders() }
//       );

//       if (response.data && response.data.fileUrl) {
//         uploadedUrls.push(response.data.fileUrl);
//       } else {
//         return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–µ—Ä' });
//       }
//     }

//     const portfolioString = uploadedUrls.join(',');
//     const connection = mysql.createConnection(DATA);
//     connection.connect();

//     const name = req.body.name || '–ë–µ–∑ –∏–º–µ–Ω–∏';
//     const telephone = req.body.telephone || '';
//     const professionId = req.body.profession_id || 9;
//     const photo = uploadedUrls[0] || '';

//     const insertQuery = `
//       INSERT INTO homework_human (Name, photo, telephone, profession_id, portfolio, is_published)
//       VALUES (?, ?, ?, ?, ?, true)
//     `;

//     connection.query(insertQuery, [name, photo, telephone, professionId, portfolioString], (error, result) => {
//       connection.end();
//       if (error) {
//         return res.status(500).json({ error: error.message });
//       } else {
//         return res.json({ success: true, insertedId: result.insertId, portfolio: uploadedUrls });
//       }
//     });

//   } catch (err) {
//     console.error('–û—à–∏–±–∫–∞:', err);
//     return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–ª–∏ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É' });
//   }
// });

// ==============================
// üìå –ó–∞–≥–ª—É—à–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
// ==============================
app.get('/', (req, res) => {
  res.end('<h1>Answer from server on port 5000!!!!!!!!!!!!</h1> <a href="#">Link</a>');
});

// ==============================
// üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—á–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
// ==============================
app.use((req, res) => {
  res.status(404).send('<h1>404!!!</h1>');
});

// ==============================
// üìå –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
// ==============================
app.listen(5000, () => console.log('Server running on port 5000'));
